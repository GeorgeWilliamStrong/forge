
def predictive_boundary(u1, u2, dt, dx, m, pred_bc, rho):
    """
    Predictive boundaries to mitigate boundary reflections.

    Parameters
    ----------
    u1 : torch.Tensor
        Set of parallel wavefields 1.
    u2 : torch.Tensor
        Set of parallel wavefields 1.
    dt : float
        Time increment.
    dx : float
        Spatial increment.
    m : torch.Tensor
        Slowness model.
    pred_bc : float
        Predictive boundary coefficient.
    rho : bool
        Flag to determine whether a density kernel is used.

    Returns
    -------

    """
    if rho:
        u1[:, 8, :] = ((u2[:, 8, :]*(1-(dt/(m[8, :]*dx))))+u2[:, 9, :]*(dt/(m[8, :]*dx)))*pred_bc
        u1[:, -9, :] = ((u2[:, -9, :]*(1-(dt/(m[-9, :]*dx))))+u2[:, -10, :]*(dt/(m[-9, :]*dx)))*pred_bc
        u1[:, :, 8] = ((u2[:, :, 8]*(1-(dt/(m[:, 8]*dx))))+u2[:, :, 9]*(dt/(m[:, 8]*dx)))*pred_bc
        u1[:, :, -9] = ((u2[:, :, -9]*(1-(dt/(m[:, -9]*dx))))+u2[:, :, -10]*(dt/(m[:, -9]*dx)))*pred_bc
        u1[:, 7, :] = ((u2[:, 7, :]*(1-(dt/(m[7, :]*dx))))+u2[:, 8, :]*(dt/(m[7, :]*dx)))*pred_bc
        u1[:, -8, :] = ((u2[:, -8, :]*(1-(dt/(m[-8, :]*dx))))+u2[:, -9, :]*(dt/(m[-8, :]*dx)))*pred_bc
        u1[:, :, 7] = ((u2[:, :, 7]*(1-(dt/(m[:, 7]*dx))))+u2[:, :, 8]*(dt/(m[:, 7]*dx)))*pred_bc
        u1[:, :, -8] = ((u2[:, :, -8]*(1-(dt/(m[:, -8]*dx))))+u2[:, :, -9]*(dt/(m[:, -8]*dx)))*pred_bc
        u1[:, 6, :] = ((u2[:, 6, :]*(1-(dt/(m[6, :]*dx))))+u2[:, 7, :]*(dt/(m[6, :]*dx)))*pred_bc
        u1[:, -7, :] = ((u2[:, -7, :]*(1-(dt/(m[-7, :]*dx))))+u2[:, -8, :]*(dt/(m[-7, :]*dx)))*pred_bc
        u1[:, :, 6] = ((u2[:, :, 6]*(1-(dt/(m[:, 6]*dx))))+u2[:, :, 7]*(dt/(m[:, 6]*dx)))*pred_bc
        u1[:, :, -7] = ((u2[:, :, -7]*(1-(dt/(m[:, -7]*dx))))+u2[:, :, -8]*(dt/(m[:, -7]*dx)))*pred_bc
        u1[:, 5, :] = ((u2[:, 5, :]*(1-(dt/(m[5, :]*dx))))+u2[:, 6, :]*(dt/(m[5, :]*dx)))*pred_bc
        u1[:, -6, :] = ((u2[:, -6, :]*(1-(dt/(m[-6, :]*dx))))+u2[:, -7, :]*(dt/(m[-6, :]*dx)))*pred_bc
        u1[:, :, 5] = ((u2[:, :, 5]*(1-(dt/(m[:, 5]*dx))))+u2[:, :, 6]*(dt/(m[:, 5]*dx)))*pred_bc
        u1[:, :, -6] = ((u2[:, :, -6]*(1-(dt/(m[:, -6]*dx))))+u2[:, :, -7]*(dt/(m[:, -6]*dx)))*pred_bc
        u1[:, 4, :] = ((u2[:, 4, :]*(1-(dt/(m[4, :]*dx))))+u2[:, 5, :]*(dt/(m[4, :]*dx)))*pred_bc
        u1[:, -5, :] = ((u2[:, -5, :]*(1-(dt/(m[-5, :]*dx))))+u2[:, -6, :]*(dt/(m[-5, :]*dx)))*pred_bc
        u1[:, :, 4] = ((u2[:, :, 4]*(1-(dt/(m[:, 4]*dx))))+u2[:, :, 5]*(dt/(m[:, 4]*dx)))*pred_bc
        u1[:, :, -5] = ((u2[:, :, -5]*(1-(dt/(m[:, -5]*dx))))+u2[:, :, -6]*(dt/(m[:, -5]*dx)))*pred_bc
        u1[:, 3, :] = ((u2[:, 3, :]*(1-(dt/(m[3, :]*dx))))+u1[:, 4, :]*(dt/(m[3, :]*dx)))*pred_bc
        u1[:, -4, :] = ((u2[:, -4, :]*(1-(dt/(m[-4, :]*dx))))+u1[:, -5, :]*(dt/(m[-4, :]*dx)))*pred_bc
        u1[:, :, 3] = ((u2[:, :, 3]*(1-(dt/(m[:, 3]*dx))))+u2[:, :, 4]*(dt/(m[:, 3]*dx)))*pred_bc
        u1[:, :, -4] = ((u2[:, :, -4]*(1-(dt/(m[:, -4]*dx))))+u2[:, :, -5]*(dt/(m[:, -4]*dx)))*pred_bc
        u1[:, 2, :] = ((u2[:, 2, :]*(1-(dt/(m[2, :]*dx))))+u1[:, 3, :]*(dt/(m[2, :]*dx)))*pred_bc
        u1[:, -3, :] = ((u2[:, -3, :]*(1-(dt/(m[-3, :]*dx))))+u1[:, -4, :]*(dt/(m[-3, :]*dx)))*pred_bc
        u1[:, :, 2] = ((u2[:, :, 2]*(1-(dt/(m[:, 2]*dx))))+u2[:, :, 3]*(dt/(m[:, 2]*dx)))*pred_bc
        u1[:, :, -3] = ((u2[:, :, -3]*(1-(dt/(m[:, -3]*dx))))+u2[:, :, -4]*(dt/(m[:, -3]*dx)))*pred_bc
        u1[:, 1, :] = ((u2[:, 1, :]*(1-(dt/(m[1, :]*dx))))+u2[:, 2, :]*(dt/(m[1, :]*dx)))*pred_bc
        u1[:, -2, :] = ((u2[:, -2, :]*(1-(dt/(m[-2, :]*dx))))+u2[:, -3, :]*(dt/(m[-2, :]*dx)))*pred_bc
        u1[:, :, 1] = ((u2[:, :, 1]*(1-(dt/(m[:, 1]*dx))))+u2[:, :, 2]*(dt/(m[:, 1]*dx)))*pred_bc
        u1[:, :, -2] = ((u2[:, :, -2]*(1-(dt/(m[:, -2]*dx))))+u2[:, :, -3]*(dt/(m[:, -2]*dx)))*pred_bc
        u1[:, 0, :] = ((u2[:, 0, :]*(1-(dt/(m[0, :]*dx))))+u1[:, 1, :]*(dt/(m[0, :]*dx)))*pred_bc
        u1[:, -1, :] = ((u2[:, -1, :]*(1-(dt/(m[-1, :]*dx))))+u1[:, -2, :]*(dt/(m[-1, :]*dx)))*pred_bc
        u1[:, :, 0] = ((u2[:, :, 0]*(1-(dt/(m[:, 0]*dx))))+u1[:, :, 1]*(dt/(m[:, 0]*dx)))*pred_bc
        u1[:, :, -1] = ((u2[:, :, -1]*(1-(dt/(m[:, -1]*dx))))+u1[:, :, -2]*(dt/(m[:, -1]*dx)))*pred_bc

    else:
        u1[:, 4, :] = ((u2[:, 4, :]*(1-(dt/(m[4, :]*dx))))+u2[:, 5, :]*(dt/(m[4, :]*dx)))*pred_bc
        u1[:, -5, :] = ((u2[:, -5, :]*(1-(dt/(m[-5, :]*dx))))+u2[:, -6, :]*(dt/(m[-5, :]*dx)))*pred_bc
        u1[:, :, 4] = ((u2[:, :, 4]*(1-(dt/(m[:, 4]*dx))))+u2[:, :, 5]*(dt/(m[:, 4]*dx)))*pred_bc
        u1[:, :, -5] = ((u2[:, :, -5]*(1-(dt/(m[:, -5]*dx))))+u2[:, :, -6]*(dt/(m[:, -5]*dx)))*pred_bc
        u1[:, 3, :] = ((u2[:, 3, :]*(1-(dt/(m[3, :]*dx))))+u1[:, 4, :]*(dt/(m[3, :]*dx)))*pred_bc
        u1[:, -4, :] = ((u2[:, -4, :]*(1-(dt/(m[-4, :]*dx))))+u1[:, -5, :]*(dt/(m[-4, :]*dx)))*pred_bc
        u1[:, :, 3] = ((u2[:, :, 3]*(1-(dt/(m[:, 3]*dx))))+u2[:, :, 4]*(dt/(m[:, 3]*dx)))*pred_bc
        u1[:, :, -4] = ((u2[:, :, -4]*(1-(dt/(m[:, -4]*dx))))+u2[:, :, -5]*(dt/(m[:, -4]*dx)))*pred_bc
        u1[:, 2, :] = ((u2[:, 2, :]*(1-(dt/(m[2, :]*dx))))+u1[:, 3, :]*(dt/(m[2, :]*dx)))*pred_bc
        u1[:, -3, :] = ((u2[:, -3, :]*(1-(dt/(m[-3, :]*dx))))+u1[:, -4, :]*(dt/(m[-3, :]*dx)))*pred_bc
        u1[:, :, 2] = ((u2[:, :, 2]*(1-(dt/(m[:, 2]*dx))))+u2[:, :, 3]*(dt/(m[:, 2]*dx)))*pred_bc
        u1[:, :, -3] = ((u2[:, :, -3]*(1-(dt/(m[:, -3]*dx))))+u2[:, :, -4]*(dt/(m[:, -3]*dx)))*pred_bc
        u1[:, 1, :] = ((u2[:, 1, :]*(1-(dt/(m[1, :]*dx))))+u2[:, 2, :]*(dt/(m[1, :]*dx)))*pred_bc
        u1[:, -2, :] = ((u2[:, -2, :]*(1-(dt/(m[-2, :]*dx))))+u2[:, -3, :]*(dt/(m[-2, :]*dx)))*pred_bc
        u1[:, :, 1] = ((u2[:, :, 1]*(1-(dt/(m[:, 1]*dx))))+u2[:, :, 2]*(dt/(m[:, 1]*dx)))*pred_bc
        u1[:, :, -2] = ((u2[:, :, -2]*(1-(dt/(m[:, -2]*dx))))+u2[:, :, -3]*(dt/(m[:, -2]*dx)))*pred_bc
        u1[:, 0, :] = ((u2[:, 0, :]*(1-(dt/(m[0, :]*dx))))+u1[:, 1, :]*(dt/(m[0, :]*dx)))*pred_bc
        u1[:, -1, :] = ((u2[:, -1, :]*(1-(dt/(m[-1, :]*dx))))+u1[:, -2, :]*(dt/(m[-1, :]*dx)))*pred_bc
        u1[:, :, 0] = ((u2[:, :, 0]*(1-(dt/(m[:, 0]*dx))))+u1[:, :, 1]*(dt/(m[:, 0]*dx)))*pred_bc
        u1[:, :, -1] = ((u2[:, :, -1]*(1-(dt/(m[:, -1]*dx))))+u1[:, :, -2]*(dt/(m[:, -1]*dx)))*pred_bc
